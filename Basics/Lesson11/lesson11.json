{"flowContents":{"identifier":"042aa918-e15c-3b8f-819a-48851454ba7d","instanceIdentifier":"3b917840-0194-1000-0e81-323545849893","name":"lesson11","comments":"XML в JSON","position":{"x":400.0,"y":32.0},"processGroups":[],"remoteProcessGroups":[],"processors":[{"identifier":"b327db29-4383-34bd-a3bc-ab1e92e08496","instanceIdentifier":"3b94d039-0194-1000-6321-3d383b398511","name":"TransformXml","comments":"","position":{"x":112.0,"y":-176.0},"type":"org.apache.nifi.processors.standard.TransformXml","bundle":{"group":"org.apache.nifi","artifact":"nifi-standard-nar","version":"2.1.0"},"properties":{"xslt-controller-key":null,"xslt-controller":null,"secure-processing":"true","cache-size":"10","indent-output":"true","XSLT file name":"./extensions/xml-to-json.xsl","cache-ttl-after-last-access":"60 secs"},"propertyDescriptors":{"xslt-controller-key":{"name":"xslt-controller-key","displayName":"XSLT Lookup key","identifiesControllerService":false,"sensitive":false,"dynamic":false},"xslt-controller":{"name":"xslt-controller","displayName":"XSLT Lookup","identifiesControllerService":true,"sensitive":false,"dynamic":false},"secure-processing":{"name":"secure-processing","displayName":"Secure processing","identifiesControllerService":false,"sensitive":false,"dynamic":false},"cache-size":{"name":"cache-size","displayName":"Cache size","identifiesControllerService":false,"sensitive":false,"dynamic":false},"indent-output":{"name":"indent-output","displayName":"Indent","identifiesControllerService":false,"sensitive":false,"dynamic":false},"XSLT file name":{"name":"XSLT file name","displayName":"XSLT file name","identifiesControllerService":false,"sensitive":false,"dynamic":false,"resourceDefinition":{"cardinality":"SINGLE","resourceTypes":["FILE"]}},"cache-ttl-after-last-access":{"name":"cache-ttl-after-last-access","displayName":"Cache TTL after last access","identifiesControllerService":false,"sensitive":false,"dynamic":false}},"style":{},"schedulingPeriod":"0 sec","schedulingStrategy":"TIMER_DRIVEN","executionNode":"ALL","penaltyDuration":"30 sec","yieldDuration":"1 sec","bulletinLevel":"WARN","runDurationMillis":0,"concurrentlySchedulableTaskCount":1,"autoTerminatedRelationships":["failure"],"scheduledState":"ENABLED","retryCount":10,"retriedRelationships":[],"backoffMechanism":"PENALIZE_FLOWFILE","maxBackoffPeriod":"10 mins","componentType":"PROCESSOR","groupIdentifier":"042aa918-e15c-3b8f-819a-48851454ba7d"},{"identifier":"af4ebcdf-0194-1000-c61e-2e1a52d749ba","instanceIdentifier":"9ae6642f-d45a-377c-68a8-7efbe0b24ebd","name":"ExecuteGroovyScript","comments":"","position":{"x":112.0,"y":-464.0},"type":"org.apache.nifi.processors.groovyx.ExecuteGroovyScript","bundle":{"group":"org.apache.nifi","artifact":"nifi-groovyx-nar","version":"2.1.0"},"properties":{"groovyx-script-body":"import groovy.xml.XmlSlurper\nimport groovy.json.JsonBuilder\nimport groovy.json.JsonGenerator\n\n// Универсальная функция для сравнения путей\ndef isPathMatch(jsonPath, targetPaths) {\n    def isMatch = targetPaths.contains(\"|${jsonPath}|\")\n    if (log.isDebugEnabled()) {\n        log.debug(\"${jsonPath} | Исключительный: ${isMatch}\")\n    }\n    return isMatch\n}\n\n// Функция для преобразования значения в соответствующий тип\ndef castValue(value, jsonPath, skipCastingPaths, commaSeparator) {\n    // Если путь указан в исключениях, возвращаем значение как строку\n    if (isPathMatch(jsonPath, skipCastingPaths)) {\n        if (log.isInfoEnabled()) {\n            log.info(\"Элемент ${jsonPath} | Значение \\\"${value}\\\" | Исключительный\")\n        }\n        return value\n    }\n\n    // Если значение null, пустая строка или строка \"null\", возвращаем null\n    if (value == null || value.toString().trim().isEmpty() || value.toString().trim().toLowerCase() == \"null\") {\n        if (log.isInfoEnabled()) {\n            log.info(\"Элемент ${jsonPath} | Значение null | Преобразован в null\")\n        }\n        return null // Возвращаем настоящий null\n    }\n\n    // Попытка преобразовать в integer\n    if (value.toString().isInteger()) {\n        if (log.isInfoEnabled()) {\n            log.info(\"Элемент ${jsonPath} | Значение ${value} | Преобразован в integer\")\n        }\n        return value.toInteger()\n    }\n\n    // Попытка преобразовать в double с учетом разделителя\n    try {\n        // Заменяем разделитель на точку, если используется запятая\n        def normalizedValue = commaSeparator == \",\" ? value.toString().replace(\",\", \".\") : value.toString()\n        if (normalizedValue.isDouble()) {\n            if (log.isInfoEnabled()) {\n                log.info(\"Элемент ${jsonPath} | Значение ${value} | Преобразован в double\")\n            }\n            return normalizedValue.toDouble()\n        }\n    } catch (Exception e) {\n        // Если преобразование не удалось, продолжаем\n    }\n\n    // Попытка преобразовать в boolean\n    if (value.toString().toLowerCase() in [\"true\", \"false\"]) {\n        if (log.isInfoEnabled()) {\n            log.info(\"Элемент ${jsonPath} | Значение ${value} | Преобразован в boolean\")\n        }\n        return value.toString().toBoolean()\n    }\n\n    // Если не удалось преобразовать, возвращаем как строку\n    if (log.isInfoEnabled()) {\n        log.info(\"Элемент ${jsonPath} | Значение \\\"${value}\\\"\")\n    }\n    return value\n}\n\n// Функция для рекурсивной обработки XML\ndef processXml(node, jsonPath, skipCastingPaths, commaSeparator, forceArrayPaths) {\n    if (log.isInfoEnabled()) {\n        log.info(\"\\n\\n-----> ${jsonPath}\")\n    }\n\n    // Если элемент пустой, возвращаем null\n    if (node.children().isEmpty() && node.attributes().isEmpty()) {\n        def value = node.text() ?: null\n        return castValue(value, jsonPath, skipCastingPaths, commaSeparator)\n    }\n\n    // Если элемент содержит только текстовое значение и не имеет атрибутов\n    if (node.children().size() == 1 && node.children()[0] instanceof String && node.attributes().isEmpty()) {\n        def value = node.text()\n        return castValue(value, jsonPath, skipCastingPaths, commaSeparator)\n    }\n\n    // Обработка сложных элементов (с атрибутами или вложенными элементами)\n    def result = [:]\n\n    // Обработка атрибутов\n    node.attributes().each { attrName, attrValue ->\n        result[attrName] = castValue(attrValue, \"${jsonPath}.@${attrName}\", skipCastingPaths, commaSeparator)\n    }\n\n    // Обработка дочерних элементов\n    node.children().each { child ->\n        def childName = child.name()\n        def childPath = \"${jsonPath}.${childName}\"\n        def childValue = processXml(child, childPath, skipCastingPaths, commaSeparator, forceArrayPaths)\n\n        if (result[childName] == null) {\n            // Если элемент добавляется впервые, проверяем, нужно ли его сразу преобразовать в массив\n            if (isPathMatch(\"${jsonPath}.${childName}\", forceArrayPaths)) {\n                result[childName] = [childValue] // Преобразуем в массив\n\t\t\t\tif (log.isInfoEnabled()) {\n                    log.info(\"\\n!!! Элемент ${jsonPath}.${childName} | Принудительно преобразован в массив при первом добавлении\")\n\t\t\t\t}\n            } else {\n                result[childName] = childValue // Оставляем как одиночный элемент\n            }\n        } else {\n            // Если элемент уже существует, преобразуем его в массив (если он еще не массив)\n            if (!(result[childName] instanceof List)) {\n                result[childName] = [result[childName]]\n            }\n            result[childName] << childValue // Добавляем новый элемент в массив\n        }\n    }\n\n    return result\n}\n\n// Получение FlowFile\ndef flowFile = session.get()\nif (!flowFile) return\n\ntry {\n    // Получение динамического атрибута skip_casting\n\tdef skipCasting = skip_casting.value\n    def skipCastingPaths = \"|\" + skipCasting\n        .trim() // Удаляем пробелы в начале и конце\n        .replaceAll(\"\\\\s+\", \"|\") + \"|\" // Заменяем пробелы и переносы строк на |\n    if (log.isInfoEnabled()) {\n\t\tlog.info(\"\\n\\n-=========================================-\")\n        log.info(\"Поля для пропуска преобразования: ${skipCastingPaths}\")\n    }\n\n    // Получение динамического атрибута comma_separator\n    def commaSeparator = comma_separator.value ?: \".\" // По умолчанию точка\n    if (log.isInfoEnabled()) {\n        log.info(\"Используемый разделитель для чисел: ${commaSeparator}\")\n    }\n\n    // Получение динамического атрибута force_array\n    def forceArray = force_array.value\n    def forceArrayPaths = \"|\" + forceArray\n\t    .trim()\n        .replaceAll(\"\\\\s+\", \"|\") + \"|\" \n    if (log.isInfoEnabled()) {\n        log.info(\"Поля для принудительного преобразования в массив: ${forceArrayPaths}\") // Вывод в кавычках\n    }\n\n    // Обработка FlowFile\n    flowFile = session.write(flowFile, { inputStream, outputStream ->\n        try {\n            // Парсинг XML\n            def xmlSlurper = new XmlSlurper()\n            xmlSlurper.setFeature(\"http://apache.org/xml/features/nonvalidating/load-external-dtd\", false)\n            def xml = xmlSlurper.parse(inputStream)\n\n            // Обработка XML и преобразование в JSON\n            def jsonMap = [:]\n            jsonMap[xml.name()] = processXml(xml, \"\\$.${xml.name()}\", skipCastingPaths, commaSeparator, forceArrayPaths)\n\n            // Отключение экранирования Unicode\n            def generator = new JsonGenerator.Options()\n                .disableUnicodeEscaping()\n                .build()\n\n            // Преобразование JSON в строку\n            def jsonString = generator.toJson(jsonMap)\n\n            // Запись JSON в выходной поток\n            outputStream.write(jsonString.getBytes(\"UTF-8\"))\n        } catch (Exception e) {\n            log.error(\"Ошибка при обработке FlowFile: ${e.message}\", e)\n        }\n    } as StreamCallback)\n\n    // Установка MIME-типа FlowFile в application/json\n    flowFile = session.putAttribute(flowFile, \"mime.type\", \"application/json\")\n\n    // Перенаправление FlowFile в успешный выход\n    session.transfer(flowFile, REL_SUCCESS)\n} catch (Exception e) {\n    // Обработка ошибок\n    log.error(\"Ошибка при обработке FlowFile: ${e.message}\", e)\n    session.transfer(flowFile, REL_FAILURE)\n}","groovyx-failure-strategy":"rollback","groovyx-additional-classpath":null,"force_array":"$.PrintData.Detail.Item","comma_separator":",","skip_casting":"$.PrintData.Head.Number\n$.PrintData.Head.Barcode\n$.PrintData.Head.Pack\n$.PrintData.Detail.Item.SN1\n$.PrintData.Detail.Item.Barcode\n$.PrintData.test2","groovyx-script-file":null},"propertyDescriptors":{"groovyx-script-body":{"name":"groovyx-script-body","displayName":"Script Body","identifiesControllerService":false,"sensitive":false,"dynamic":false},"groovyx-failure-strategy":{"name":"groovyx-failure-strategy","displayName":"Failure strategy","identifiesControllerService":false,"sensitive":false,"dynamic":false},"groovyx-additional-classpath":{"name":"groovyx-additional-classpath","displayName":"Additional classpath","identifiesControllerService":false,"sensitive":false,"dynamic":false},"force_array":{"name":"force_array","displayName":"force_array","identifiesControllerService":false,"sensitive":false,"dynamic":true},"comma_separator":{"name":"comma_separator","displayName":"comma_separator","identifiesControllerService":false,"sensitive":false,"dynamic":true},"skip_casting":{"name":"skip_casting","displayName":"skip_casting","identifiesControllerService":false,"sensitive":false,"dynamic":true},"groovyx-script-file":{"name":"groovyx-script-file","displayName":"Script File","identifiesControllerService":false,"sensitive":false,"dynamic":false,"resourceDefinition":{"cardinality":"SINGLE","resourceTypes":["FILE"]}}},"style":{},"schedulingPeriod":"0 sec","schedulingStrategy":"TIMER_DRIVEN","executionNode":"ALL","penaltyDuration":"30 sec","yieldDuration":"1 sec","bulletinLevel":"WARN","runDurationMillis":0,"concurrentlySchedulableTaskCount":1,"autoTerminatedRelationships":["failure"],"scheduledState":"ENABLED","retryCount":10,"retriedRelationships":[],"backoffMechanism":"PENALIZE_FLOWFILE","maxBackoffPeriod":"10 mins","componentType":"PROCESSOR","groupIdentifier":"042aa918-e15c-3b8f-819a-48851454ba7d"},{"identifier":"909a06a6-0195-1000-41ac-e543054f31c9","instanceIdentifier":"e4b60762-978b-3490-1ba9-8842b0358032","name":"ExecuteGroovyScript","comments":"","position":{"x":112.0,"y":-608.0},"type":"org.apache.nifi.processors.groovyx.ExecuteGroovyScript","bundle":{"group":"org.apache.nifi","artifact":"nifi-groovyx-nar","version":"2.1.0"},"properties":{"groovyx-script-body":"@GrabResolver(name='central', root='https://repo1.maven.org/maven2/')\n@Grab(group='org.kordamp.json', module='json-lib-core', version='3.0.2')\n@Grab(group='net.sf.ezmorph', module='ezmorph', version='1.0.6')\n\nimport org.apache.nifi.processor.io.StreamCallback\nimport java.nio.charset.StandardCharsets\nimport org.apache.commons.io.IOUtils\nimport org.kordamp.json.xml.XMLSerializer  // класс из json‑lib\n\n// Получаем FlowFile\ndef flowFile = session.get()\nif (!flowFile) return\n\nflowFile = session.write(flowFile, { inputStream, outputStream ->\n    // Читаем XML из FlowFile\n    def xmlContent = IOUtils.toString(inputStream, StandardCharsets.UTF_8)\n    \n    // Создаём экземпляр XMLSerializer (json‑lib)\n    def serializer = new XMLSerializer()\n    \n    // Преобразуем XML в JSON (результат – JSONObject или JSONArray)\n    def jsonObj = serializer.read(xmlContent)\n    \n    // Преобразуем объект в строку (можно форматировать вывод, например, через toString(4))\n    def jsonString = jsonObj.toString(4)\n    \n    // Записываем JSON в выходной поток\n    outputStream.write(jsonString.getBytes(StandardCharsets.UTF_8))\n} as StreamCallback)\n\n// Передаём FlowFile в REL_SUCCESS\nsession.transfer(flowFile, REL_SUCCESS)\n","groovyx-failure-strategy":"rollback","groovyx-additional-classpath":null,"groovyx-script-file":null},"propertyDescriptors":{"groovyx-script-body":{"name":"groovyx-script-body","displayName":"Script Body","identifiesControllerService":false,"sensitive":false,"dynamic":false},"groovyx-failure-strategy":{"name":"groovyx-failure-strategy","displayName":"Failure strategy","identifiesControllerService":false,"sensitive":false,"dynamic":false},"groovyx-additional-classpath":{"name":"groovyx-additional-classpath","displayName":"Additional classpath","identifiesControllerService":false,"sensitive":false,"dynamic":false},"groovyx-script-file":{"name":"groovyx-script-file","displayName":"Script File","identifiesControllerService":false,"sensitive":false,"dynamic":false,"resourceDefinition":{"cardinality":"SINGLE","resourceTypes":["FILE"]}}},"style":{},"schedulingPeriod":"0 sec","schedulingStrategy":"TIMER_DRIVEN","executionNode":"ALL","penaltyDuration":"30 sec","yieldDuration":"1 sec","bulletinLevel":"WARN","runDurationMillis":0,"concurrentlySchedulableTaskCount":1,"autoTerminatedRelationships":["failure"],"scheduledState":"ENABLED","retryCount":10,"retriedRelationships":[],"backoffMechanism":"PENALIZE_FLOWFILE","maxBackoffPeriod":"10 mins","componentType":"PROCESSOR","groupIdentifier":"042aa918-e15c-3b8f-819a-48851454ba7d"},{"identifier":"6aa3fdd3-1962-3baf-9f94-a125f55bd3c1","instanceIdentifier":"3b939bf0-0194-1000-2c2c-2d0f6f749ec3","name":"ConvertRecord","comments":"","position":{"x":112.0,"y":-320.0},"type":"org.apache.nifi.processors.standard.ConvertRecord","bundle":{"group":"org.apache.nifi","artifact":"nifi-standard-nar","version":"2.1.0"},"properties":{"Include Zero Record FlowFiles":"true","Record Writer":"c069baf4-25b8-3a22-b87e-57746c0b3fd1","Record Reader":"f173a5de-fb38-32ce-803c-3d70f8e01ea3"},"propertyDescriptors":{"Include Zero Record FlowFiles":{"name":"Include Zero Record FlowFiles","displayName":"Include Zero Record FlowFiles","identifiesControllerService":false,"sensitive":false,"dynamic":false},"Record Writer":{"name":"Record Writer","displayName":"Record Writer","identifiesControllerService":true,"sensitive":false,"dynamic":false},"Record Reader":{"name":"Record Reader","displayName":"Record Reader","identifiesControllerService":true,"sensitive":false,"dynamic":false}},"style":{},"schedulingPeriod":"0 sec","schedulingStrategy":"TIMER_DRIVEN","executionNode":"ALL","penaltyDuration":"30 sec","yieldDuration":"1 sec","bulletinLevel":"WARN","runDurationMillis":0,"concurrentlySchedulableTaskCount":1,"autoTerminatedRelationships":["failure"],"scheduledState":"ENABLED","retryCount":10,"retriedRelationships":[],"backoffMechanism":"PENALIZE_FLOWFILE","maxBackoffPeriod":"10 mins","componentType":"PROCESSOR","groupIdentifier":"042aa918-e15c-3b8f-819a-48851454ba7d"},{"identifier":"6fc5befc-0597-31f0-a174-41c19cb39172","instanceIdentifier":"3b93478d-0194-1000-202a-bf7f452e9588","name":"GenerateFlowFile","comments":"","position":{"x":-528.0,"y":-408.0},"type":"org.apache.nifi.processors.standard.GenerateFlowFile","bundle":{"group":"org.apache.nifi","artifact":"nifi-standard-nar","version":"2.1.0"},"properties":{"character-set":"UTF-8","File Size":"0B","mime-type":"application/json","generate-ff-custom-text":"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<PrintData>\n    <PrinterName/>\n    <TemplateName>A4_UPL.sctmpl</TemplateName>\n    <Count>1</Count>\n    <test>true</test>\n    <test2>null</test2>\n    <!--cadastral_engineer_registry_number>39374 </cadastral_engineer_registry_number-->\n    <Head>\n        <Client>SP</Client>\n        <Date>01.04.2020 14:39:23</Date>\n        <Number>000000018</Number>\n        <Barcode>UPL000000018</Barcode>\n        <Pack>000000018</Pack>\n    </Head>\n    <Detail>\n        <Item json:force-array=\"true\" xmlns:json=\"http://json.org/\">\n            <ArtName>Сыр Рокфор </ArtName>\n            <Barcode>2000000000121</Barcode>\n            <QNT>254,4</QNT>\n            <QNTPack>254,4</QNTPack>\n            <Unit>шт</Unit>\n            <SN1>00000005</SN1>\n            <SN2>06.11.2019</SN2>\n            <!--QNTRows>18<test>9</test></QNTRows-->\n        </Item>\n    </Detail>\n    <Summary>\n        <Summ>469,55</Summ>\n        <SummRows>33</SummRows>\n    </Summary>\n    <Customer CustomerID=\"HUNGC\">\n        <Date>2020-4-9</Date>\n        <User>Аркадий Иванович</User>\n    </Customer>\n</PrintData>","Batch Size":"1","Unique FlowFiles":"false","Data Format":"Text"},"propertyDescriptors":{"character-set":{"name":"character-set","displayName":"Character Set","identifiesControllerService":false,"sensitive":false,"dynamic":false},"File Size":{"name":"File Size","displayName":"File Size","identifiesControllerService":false,"sensitive":false,"dynamic":false},"mime-type":{"name":"mime-type","displayName":"Mime Type","identifiesControllerService":false,"sensitive":false,"dynamic":false},"generate-ff-custom-text":{"name":"generate-ff-custom-text","displayName":"Custom Text","identifiesControllerService":false,"sensitive":false,"dynamic":false},"Batch Size":{"name":"Batch Size","displayName":"Batch Size","identifiesControllerService":false,"sensitive":false,"dynamic":false},"Unique FlowFiles":{"name":"Unique FlowFiles","displayName":"Unique FlowFiles","identifiesControllerService":false,"sensitive":false,"dynamic":false},"Data Format":{"name":"Data Format","displayName":"Data Format","identifiesControllerService":false,"sensitive":false,"dynamic":false}},"style":{},"schedulingPeriod":"0 sec","schedulingStrategy":"TIMER_DRIVEN","executionNode":"ALL","penaltyDuration":"30 sec","yieldDuration":"1 sec","bulletinLevel":"WARN","runDurationMillis":0,"concurrentlySchedulableTaskCount":1,"autoTerminatedRelationships":[],"scheduledState":"ENABLED","retryCount":10,"retriedRelationships":[],"backoffMechanism":"PENALIZE_FLOWFILE","maxBackoffPeriod":"10 mins","componentType":"PROCESSOR","groupIdentifier":"042aa918-e15c-3b8f-819a-48851454ba7d"}],"inputPorts":[],"outputPorts":[],"connections":[{"identifier":"f57ad9b1-fdee-33ab-965b-dd4895743622","instanceIdentifier":"909a5052-0195-1000-8409-53f63a5f5d0e","name":"","source":{"id":"6fc5befc-0597-31f0-a174-41c19cb39172","type":"PROCESSOR","groupId":"042aa918-e15c-3b8f-819a-48851454ba7d","name":"GenerateFlowFile","comments":"","instanceIdentifier":"3b93478d-0194-1000-202a-bf7f452e9588"},"destination":{"id":"909a06a6-0195-1000-41ac-e543054f31c9","type":"PROCESSOR","groupId":"042aa918-e15c-3b8f-819a-48851454ba7d","name":"ExecuteGroovyScript","comments":"","instanceIdentifier":"e4b60762-978b-3490-1ba9-8842b0358032"},"labelIndex":0,"zIndex":0,"selectedRelationships":["success"],"backPressureObjectThreshold":10000,"backPressureDataSizeThreshold":"1 GB","flowFileExpiration":"0 sec","prioritizers":[],"bends":[],"loadBalanceStrategy":"DO_NOT_LOAD_BALANCE","partitioningAttribute":"","loadBalanceCompression":"DO_NOT_COMPRESS","componentType":"CONNECTION","groupIdentifier":"042aa918-e15c-3b8f-819a-48851454ba7d"},{"identifier":"493da4fb-78a0-39d4-ba4e-3b130316dd11","instanceIdentifier":"3b950f77-0194-1000-f980-603e6cd28be2","name":"","source":{"id":"b327db29-4383-34bd-a3bc-ab1e92e08496","type":"PROCESSOR","groupId":"042aa918-e15c-3b8f-819a-48851454ba7d","name":"TransformXml","comments":"","instanceIdentifier":"3b94d039-0194-1000-6321-3d383b398511"},"destination":{"id":"9200126d-bdc6-38eb-a6dd-f859eaa14fdb","type":"FUNNEL","groupId":"042aa918-e15c-3b8f-819a-48851454ba7d","name":"Funnel","comments":"","instanceIdentifier":"3b94fac1-0194-1000-1927-ed5a889d50f2"},"labelIndex":0,"zIndex":0,"selectedRelationships":["success"],"backPressureObjectThreshold":10000,"backPressureDataSizeThreshold":"1 GB","flowFileExpiration":"0 sec","prioritizers":[],"bends":[],"loadBalanceStrategy":"DO_NOT_LOAD_BALANCE","partitioningAttribute":"","loadBalanceCompression":"DO_NOT_COMPRESS","componentType":"CONNECTION","groupIdentifier":"042aa918-e15c-3b8f-819a-48851454ba7d"},{"identifier":"e128a54f-e7e6-363a-8f23-a93651e09bcf","instanceIdentifier":"3b93e793-0194-1000-8dbb-57996859dd4d","name":"","source":{"id":"6aa3fdd3-1962-3baf-9f94-a125f55bd3c1","type":"PROCESSOR","groupId":"042aa918-e15c-3b8f-819a-48851454ba7d","name":"ConvertRecord","comments":"","instanceIdentifier":"3b939bf0-0194-1000-2c2c-2d0f6f749ec3"},"destination":{"id":"1eec9660-a96f-3199-8216-569f15951e63","type":"FUNNEL","groupId":"042aa918-e15c-3b8f-819a-48851454ba7d","name":"Funnel","comments":"","instanceIdentifier":"3b93c663-0194-1000-bb62-5fe2287565bc"},"labelIndex":0,"zIndex":0,"selectedRelationships":["success"],"backPressureObjectThreshold":10000,"backPressureDataSizeThreshold":"1 GB","flowFileExpiration":"0 sec","prioritizers":[],"bends":[],"loadBalanceStrategy":"DO_NOT_LOAD_BALANCE","partitioningAttribute":"","loadBalanceCompression":"DO_NOT_COMPRESS","componentType":"CONNECTION","groupIdentifier":"042aa918-e15c-3b8f-819a-48851454ba7d"},{"identifier":"7784b8df-4f50-3c02-bec2-033870668393","instanceIdentifier":"3b94ec2e-0194-1000-cc3f-9cfe640510fe","name":"","source":{"id":"6fc5befc-0597-31f0-a174-41c19cb39172","type":"PROCESSOR","groupId":"042aa918-e15c-3b8f-819a-48851454ba7d","name":"GenerateFlowFile","comments":"","instanceIdentifier":"3b93478d-0194-1000-202a-bf7f452e9588"},"destination":{"id":"b327db29-4383-34bd-a3bc-ab1e92e08496","type":"PROCESSOR","groupId":"042aa918-e15c-3b8f-819a-48851454ba7d","name":"TransformXml","comments":"","instanceIdentifier":"3b94d039-0194-1000-6321-3d383b398511"},"labelIndex":0,"zIndex":0,"selectedRelationships":["success"],"backPressureObjectThreshold":10000,"backPressureDataSizeThreshold":"1 GB","flowFileExpiration":"0 sec","prioritizers":[],"bends":[],"loadBalanceStrategy":"DO_NOT_LOAD_BALANCE","partitioningAttribute":"","loadBalanceCompression":"DO_NOT_COMPRESS","componentType":"CONNECTION","groupIdentifier":"042aa918-e15c-3b8f-819a-48851454ba7d"},{"identifier":"d405c8d1-dfc3-37ee-b6ca-c61af96ad3b2","instanceIdentifier":"af512fd3-0194-1000-a07f-90819fca59b9","name":"","source":{"id":"af4ebcdf-0194-1000-c61e-2e1a52d749ba","type":"PROCESSOR","groupId":"042aa918-e15c-3b8f-819a-48851454ba7d","name":"ExecuteGroovyScript","comments":"","instanceIdentifier":"9ae6642f-d45a-377c-68a8-7efbe0b24ebd"},"destination":{"id":"ecb34ec5-5522-3163-b115-9b1eff60441d","type":"FUNNEL","groupId":"042aa918-e15c-3b8f-819a-48851454ba7d","name":"Funnel","comments":"","instanceIdentifier":"af511d45-0194-1000-9bd9-c94bcda05742"},"labelIndex":0,"zIndex":0,"selectedRelationships":["success"],"backPressureObjectThreshold":10000,"backPressureDataSizeThreshold":"1 GB","flowFileExpiration":"0 sec","prioritizers":[],"bends":[],"loadBalanceStrategy":"DO_NOT_LOAD_BALANCE","partitioningAttribute":"","loadBalanceCompression":"DO_NOT_COMPRESS","componentType":"CONNECTION","groupIdentifier":"042aa918-e15c-3b8f-819a-48851454ba7d"},{"identifier":"ce8819de-c54c-327d-97f5-5e3d2a122830","instanceIdentifier":"909a3b60-0195-1000-9b05-53e585b5394d","name":"","source":{"id":"909a06a6-0195-1000-41ac-e543054f31c9","type":"PROCESSOR","groupId":"042aa918-e15c-3b8f-819a-48851454ba7d","name":"ExecuteGroovyScript","comments":"","instanceIdentifier":"e4b60762-978b-3490-1ba9-8842b0358032"},"destination":{"id":"da4ecddb-f098-3096-bfd5-613b5505590b","type":"FUNNEL","groupId":"042aa918-e15c-3b8f-819a-48851454ba7d","name":"Funnel","comments":"","instanceIdentifier":"909a29c5-0195-1000-8dec-79e2502e2d8f"},"labelIndex":0,"zIndex":0,"selectedRelationships":["success"],"backPressureObjectThreshold":10000,"backPressureDataSizeThreshold":"1 GB","flowFileExpiration":"0 sec","prioritizers":[],"bends":[],"loadBalanceStrategy":"DO_NOT_LOAD_BALANCE","partitioningAttribute":"","loadBalanceCompression":"DO_NOT_COMPRESS","componentType":"CONNECTION","groupIdentifier":"042aa918-e15c-3b8f-819a-48851454ba7d"},{"identifier":"8858ec65-0460-3003-9657-4bb5c2f05cb0","instanceIdentifier":"3b93b710-0194-1000-f955-547177b924ee","name":"","source":{"id":"6fc5befc-0597-31f0-a174-41c19cb39172","type":"PROCESSOR","groupId":"042aa918-e15c-3b8f-819a-48851454ba7d","name":"GenerateFlowFile","comments":"","instanceIdentifier":"3b93478d-0194-1000-202a-bf7f452e9588"},"destination":{"id":"6aa3fdd3-1962-3baf-9f94-a125f55bd3c1","type":"PROCESSOR","groupId":"042aa918-e15c-3b8f-819a-48851454ba7d","name":"ConvertRecord","comments":"","instanceIdentifier":"3b939bf0-0194-1000-2c2c-2d0f6f749ec3"},"labelIndex":0,"zIndex":0,"selectedRelationships":["success"],"backPressureObjectThreshold":10000,"backPressureDataSizeThreshold":"1 GB","flowFileExpiration":"0 sec","prioritizers":[],"bends":[],"loadBalanceStrategy":"DO_NOT_LOAD_BALANCE","partitioningAttribute":"","loadBalanceCompression":"DO_NOT_COMPRESS","componentType":"CONNECTION","groupIdentifier":"042aa918-e15c-3b8f-819a-48851454ba7d"},{"identifier":"12eb0e65-94df-3e2c-bfff-561ab04c168f","instanceIdentifier":"af51127b-0194-1000-3423-d7928a616fe0","name":"","source":{"id":"6fc5befc-0597-31f0-a174-41c19cb39172","type":"PROCESSOR","groupId":"042aa918-e15c-3b8f-819a-48851454ba7d","name":"GenerateFlowFile","comments":"","instanceIdentifier":"3b93478d-0194-1000-202a-bf7f452e9588"},"destination":{"id":"af4ebcdf-0194-1000-c61e-2e1a52d749ba","type":"PROCESSOR","groupId":"042aa918-e15c-3b8f-819a-48851454ba7d","name":"ExecuteGroovyScript","comments":"","instanceIdentifier":"9ae6642f-d45a-377c-68a8-7efbe0b24ebd"},"labelIndex":0,"zIndex":0,"selectedRelationships":["success"],"backPressureObjectThreshold":10000,"backPressureDataSizeThreshold":"1 GB","flowFileExpiration":"0 sec","prioritizers":[],"bends":[],"loadBalanceStrategy":"DO_NOT_LOAD_BALANCE","partitioningAttribute":"","loadBalanceCompression":"DO_NOT_COMPRESS","componentType":"CONNECTION","groupIdentifier":"042aa918-e15c-3b8f-819a-48851454ba7d"}],"labels":[],"funnels":[{"identifier":"1eec9660-a96f-3199-8216-569f15951e63","instanceIdentifier":"3b93c663-0194-1000-bb62-5fe2287565bc","position":{"x":712.0,"y":-280.0},"componentType":"FUNNEL","groupIdentifier":"042aa918-e15c-3b8f-819a-48851454ba7d"},{"identifier":"9200126d-bdc6-38eb-a6dd-f859eaa14fdb","instanceIdentifier":"3b94fac1-0194-1000-1927-ed5a889d50f2","position":{"x":712.0,"y":-136.0},"componentType":"FUNNEL","groupIdentifier":"042aa918-e15c-3b8f-819a-48851454ba7d"},{"identifier":"da4ecddb-f098-3096-bfd5-613b5505590b","instanceIdentifier":"909a29c5-0195-1000-8dec-79e2502e2d8f","position":{"x":712.0000214738034,"y":-571.5000109846762},"componentType":"FUNNEL","groupIdentifier":"042aa918-e15c-3b8f-819a-48851454ba7d"},{"identifier":"ecb34ec5-5522-3163-b115-9b1eff60441d","instanceIdentifier":"af511d45-0194-1000-9bd9-c94bcda05742","position":{"x":712.0,"y":-424.0},"componentType":"FUNNEL","groupIdentifier":"042aa918-e15c-3b8f-819a-48851454ba7d"}],"controllerServices":[{"identifier":"f173a5de-fb38-32ce-803c-3d70f8e01ea3","instanceIdentifier":"3b9efde8-0194-1000-9b65-220ce83f1889","name":"XMLReader","comments":"","type":"org.apache.nifi.xml.XMLReader","bundle":{"group":"org.apache.nifi","artifact":"nifi-record-serialization-services-nar","version":"2.1.0"},"properties":{"schema-reference-reader":null,"content_field_name":null,"schema-branch":null,"Timestamp Format":null,"schema-inference-cache":null,"Date Format":null,"parse_xml_attributes":"true","record_format":"false","attribute_prefix":null,"schema-name":"${schema.name}","schema-registry":null,"Time Format":null,"schema-access-strategy":"infer-schema","schema-version":null,"schema-text":"${avro.schema}"},"propertyDescriptors":{"schema-reference-reader":{"name":"schema-reference-reader","displayName":"Schema Reference Reader","identifiesControllerService":true,"sensitive":false,"dynamic":false},"content_field_name":{"name":"content_field_name","displayName":"Field Name for Content","identifiesControllerService":false,"sensitive":false,"dynamic":false},"schema-branch":{"name":"schema-branch","displayName":"Schema Branch","identifiesControllerService":false,"sensitive":false,"dynamic":false},"Timestamp Format":{"name":"Timestamp Format","displayName":"Timestamp Format","identifiesControllerService":false,"sensitive":false,"dynamic":false},"schema-inference-cache":{"name":"schema-inference-cache","displayName":"Schema Inference Cache","identifiesControllerService":true,"sensitive":false,"dynamic":false},"Date Format":{"name":"Date Format","displayName":"Date Format","identifiesControllerService":false,"sensitive":false,"dynamic":false},"parse_xml_attributes":{"name":"parse_xml_attributes","displayName":"Parse XML Attributes","identifiesControllerService":false,"sensitive":false,"dynamic":false},"record_format":{"name":"record_format","displayName":"Expect Records as Array","identifiesControllerService":false,"sensitive":false,"dynamic":false},"attribute_prefix":{"name":"attribute_prefix","displayName":"Attribute Prefix","identifiesControllerService":false,"sensitive":false,"dynamic":false},"schema-name":{"name":"schema-name","displayName":"Schema Name","identifiesControllerService":false,"sensitive":false,"dynamic":false},"schema-registry":{"name":"schema-registry","displayName":"Schema Registry","identifiesControllerService":true,"sensitive":false,"dynamic":false},"Time Format":{"name":"Time Format","displayName":"Time Format","identifiesControllerService":false,"sensitive":false,"dynamic":false},"schema-access-strategy":{"name":"schema-access-strategy","displayName":"Schema Access Strategy","identifiesControllerService":false,"sensitive":false,"dynamic":false},"schema-version":{"name":"schema-version","displayName":"Schema Version","identifiesControllerService":false,"sensitive":false,"dynamic":false},"schema-text":{"name":"schema-text","displayName":"Schema Text","identifiesControllerService":false,"sensitive":false,"dynamic":false}},"controllerServiceApis":[{"type":"org.apache.nifi.serialization.RecordReaderFactory","bundle":{"group":"org.apache.nifi","artifact":"nifi-standard-services-api-nar","version":"2.1.0"}}],"scheduledState":"DISABLED","bulletinLevel":"WARN","componentType":"CONTROLLER_SERVICE","groupIdentifier":"042aa918-e15c-3b8f-819a-48851454ba7d"},{"identifier":"c069baf4-25b8-3a22-b87e-57746c0b3fd1","instanceIdentifier":"3b9f4ba0-0194-1000-938e-3106b32d2a60","name":"JsonRecordSetWriter","comments":"","type":"org.apache.nifi.json.JsonRecordSetWriter","bundle":{"group":"org.apache.nifi","artifact":"nifi-record-serialization-services-nar","version":"2.1.0"},"properties":{"schema-reference-reader":null,"schema-branch":null,"Allow Scientific Notation":"false","compression-level":"1","schema-cache":null,"Timestamp Format":null,"Date Format":null,"Pretty Print JSON":"false","compression-format":"none","Schema Write Strategy":"no-schema","suppress-nulls":"never-suppress","output-grouping":"output-oneline","schema-name":"${schema.name}","schema-registry":null,"Time Format":null,"schema-access-strategy":"inherit-record-schema","schema-version":null,"schema-text":"${avro.schema}","Schema Reference Writer":null},"propertyDescriptors":{"schema-reference-reader":{"name":"schema-reference-reader","displayName":"Schema Reference Reader","identifiesControllerService":true,"sensitive":false,"dynamic":false},"schema-branch":{"name":"schema-branch","displayName":"Schema Branch","identifiesControllerService":false,"sensitive":false,"dynamic":false},"Allow Scientific Notation":{"name":"Allow Scientific Notation","displayName":"Allow Scientific Notation","identifiesControllerService":false,"sensitive":false,"dynamic":false},"compression-level":{"name":"compression-level","displayName":"Compression Level","identifiesControllerService":false,"sensitive":false,"dynamic":false},"schema-cache":{"name":"schema-cache","displayName":"Schema Cache","identifiesControllerService":true,"sensitive":false,"dynamic":false},"Timestamp Format":{"name":"Timestamp Format","displayName":"Timestamp Format","identifiesControllerService":false,"sensitive":false,"dynamic":false},"Date Format":{"name":"Date Format","displayName":"Date Format","identifiesControllerService":false,"sensitive":false,"dynamic":false},"Pretty Print JSON":{"name":"Pretty Print JSON","displayName":"Pretty Print JSON","identifiesControllerService":false,"sensitive":false,"dynamic":false},"compression-format":{"name":"compression-format","displayName":"Compression Format","identifiesControllerService":false,"sensitive":false,"dynamic":false},"Schema Write Strategy":{"name":"Schema Write Strategy","displayName":"Schema Write Strategy","identifiesControllerService":false,"sensitive":false,"dynamic":false},"suppress-nulls":{"name":"suppress-nulls","displayName":"Suppress Null Values","identifiesControllerService":false,"sensitive":false,"dynamic":false},"output-grouping":{"name":"output-grouping","displayName":"Output Grouping","identifiesControllerService":false,"sensitive":false,"dynamic":false},"schema-name":{"name":"schema-name","displayName":"Schema Name","identifiesControllerService":false,"sensitive":false,"dynamic":false},"schema-registry":{"name":"schema-registry","displayName":"Schema Registry","identifiesControllerService":true,"sensitive":false,"dynamic":false},"Time Format":{"name":"Time Format","displayName":"Time Format","identifiesControllerService":false,"sensitive":false,"dynamic":false},"schema-access-strategy":{"name":"schema-access-strategy","displayName":"Schema Access Strategy","identifiesControllerService":false,"sensitive":false,"dynamic":false},"schema-version":{"name":"schema-version","displayName":"Schema Version","identifiesControllerService":false,"sensitive":false,"dynamic":false},"schema-text":{"name":"schema-text","displayName":"Schema Text","identifiesControllerService":false,"sensitive":false,"dynamic":false},"Schema Reference Writer":{"name":"Schema Reference Writer","displayName":"Schema Reference Writer","identifiesControllerService":true,"sensitive":false,"dynamic":false}},"controllerServiceApis":[{"type":"org.apache.nifi.serialization.RecordSetWriterFactory","bundle":{"group":"org.apache.nifi","artifact":"nifi-standard-services-api-nar","version":"2.1.0"}}],"scheduledState":"DISABLED","bulletinLevel":"WARN","componentType":"CONTROLLER_SERVICE","groupIdentifier":"042aa918-e15c-3b8f-819a-48851454ba7d"}],"defaultFlowFileExpiration":"0 sec","defaultBackPressureObjectThreshold":10000,"defaultBackPressureDataSizeThreshold":"1 GB","scheduledState":"ENABLED","executionEngine":"INHERITED","maxConcurrentTasks":1,"statelessFlowTimeout":"1 min","componentType":"PROCESS_GROUP","flowFileConcurrency":"UNBOUNDED","flowFileOutboundPolicy":"STREAM_WHEN_AVAILABLE"},"externalControllerServices":{},"parameterContexts":{},"flowEncodingVersion":"1.0","parameterProviders":{},"latest":false}